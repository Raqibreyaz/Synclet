- when a file is modified check what is in it changed, just extract that part ✅
- do we require inotify API? (will consider after creating the main logic) ✅
- fixed size chunking ✅
- content defined chunking
- breaking file into chunks✅
- where will we save the chunks & the previous state -> snap-file.json ✅
- comparing chunked hashes ✅
- hashing(crypto) ✅
 detecting if something has changed in the folder/file ✅
- using inotify api check which file is changed then compare both the states using the chunks and take out the changed ones ✅
- but the problem is that the program runs continously watching files
- which will be better if on changing files run the program and on basis of it will sync to server or watch continously and as soon as change received then sync it(but works for every byte , debouncing like logic will be required here) ✅ (used hybrid approach by considering both)

- map stores all the file snaps, ❌(it is must)
- for every change it resets the whole SNAP_FILE ✅ 
- if a file changes then extract that file's chunks, compare every chunk and replace only that changed chunks in the SNAP_FILE ❌ (not possible for .json)

CDC(content defined chunking)
- fixed size chunking fails to correctly identifies the changed chunk as the chunks afterwards also shifts  so using CDC ✅
- chunks are created using (hash % N == 0), if this condition met for a window ✅
- 2 important vars, N and window size ✅
- chunks can be of ~N size but not ==N ✅
- used hybrid approach of weak + strong hash where weak hash finds boundary and strong hash for saving actual hash of chunk (used combination of rolling hash + SHA-256) ✅ 

- in case of just rename not deletion then instead of sending file, rename in the server too!! ✅
- compare changes optimally ✅
- track renamed files and send ✅
- will we save the rename state in the snap-file? ❌
- how to send the rename state with the snapshot? ✅
- how to single update when multiple rename of the same file? ❌
- instead of logging now we have to return the changed parts for syncing ✅
- create a minimal version where client on detecting changes using inotify syncs to server ✅

- how the debouncing works here?

- have to clean/filter unnecessary or duplicate events like:
for same file MODIFY + DELETE then consider DELETE, for same file MODIFY + MODIFY + ... + MODIFY then consider the last one
. one approach can be spawn a thread where main thread will take out events and side by side child thread will clean the events

- optimise fileio class for removing/adding & modifying specific chunks
given offset and chunk_size ✅
. remove bytes from j index to last, ftruncate!! but not ftruncate, instead we written to temp_file and escaping that chunk thats all ✅
. add chars from offset to offset+chunk_size-1 ✅
. this can only be done via creating a temp file as doing these operations not possible for files ✅
. but have to optimise as if multiple chunks are to be sent then for each cunk a temp file will be created/destroyed so need to understand when to create/destroy temp file ✅

- add a class for handling different types of messages for client side✅
- add a class for handling different types of message for server side ✅

- create the whole logic of server side to handle chunks writes, chunk deletes ✅

modification: ✅
. old chunk offset + size to remove the chunk and new chunk's offset + size to extract from file and replace with.
addition: ✅
. take new chunk's offset + size to extract from file and append the data of new chunk
deletion: ✅
. take end index of the old chunk to truncate file
. suppose 5 chunks removed so take the end index of the first removed chunk 
- addition/deletion only one will exist at a time ✅

- initially any peer should know what to send/receive before watching for events as there can be changes when program was closed. ✅
- lets say some files were modifed, few were removed, few were created then how this info will be sent as we  have different message types for these✅ 

- how server should handle multiple modify chunks of same file ✅
. by keeping a file pointer which opens a file and not closes till any other file's chunk come ✅
. but issue is when to detect that this is the last modify chunk received ✅ (added is_last_chunk prop)
- for each change update the map also at both client and server

- handle REQ_CHUNK, REQ_DOWNLOAD_FILES, REQ_SNAP, REQ_SNAP_VERSION in sender-message-handler
